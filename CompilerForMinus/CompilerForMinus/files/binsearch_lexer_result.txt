*****************************************
C-Minus Lexical Analazer Result:
*****************************************
3:	int
3:	ID, name = Array
3:	[
3:	NUM, value = 10
3:	]
3:	;
5:	int
5:	ID, name = findByBinary
5:	(
5:	int
5:	ID, name = array
5:	[
5:	]
5:	,
5:	int
5:	ID, name = size
5:	,
5:	int
5:	ID, name = number
5:	)
6:	{
7:	int
7:	ID, name = low
7:	;
8:	int
8:	ID, name = high
8:	;
9:	int
9:	ID, name = mid
9:	;
10:	int
10:	ID, name = notfound
10:	;
12:	ID, name = low
12:	=
12:	NUM, value = 0
12:	;
13:	ID, name = high
13:	=
13:	ID, name = size
13:	-
13:	NUM, value = 1
13:	;
14:	ID, name = notfound
14:	=
14:	(
14:	NUM, value = 0
14:	-
14:	NUM, value = 1
14:	)
14:	;
16:	while
16:	(
16:	ID, name = low
16:	<=
16:	ID, name = high
16:	)
17:	{
18:	ID, name = mid
18:	=
18:	ID, name = low
18:	+
18:	(
18:	ID, name = high
18:	-
18:	ID, name = low
18:	)
18:	/
18:	NUM, value = 2
18:	;
20:	if
20:	(
20:	ID, name = array
20:	[
20:	ID, name = low
20:	]
20:	==
20:	ID, name = number
20:	)
21:	{
22:	return
22:	ID, name = low
22:	;
23:	}
24:	if
24:	(
24:	ID, name = array
24:	[
24:	ID, name = high
24:	]
24:	==
24:	ID, name = number
24:	)
25:	{
26:	return
26:	ID, name = high
26:	;
27:	}
28:	if
28:	(
28:	ID, name = array
28:	[
28:	ID, name = mid
28:	]
28:	==
28:	ID, name = number
28:	)
29:	{
30:	return
30:	ID, name = mid
30:	;
31:	}
33:	if
33:	(
33:	ID, name = array
33:	[
33:	ID, name = mid
33:	]
33:	<
33:	ID, name = number
33:	)
34:	{
35:	ID, name = low
35:	=
35:	ID, name = mid
35:	+
35:	NUM, value = 1
35:	;
36:	}
37:	else
38:	{
39:	ID, name = high
39:	=
39:	ID, name = mid
39:	-
39:	NUM, value = 1
39:	;
40:	}
41:	}
43:	return
43:	ID, name = notfound
43:	;
44:	}
46:	void
46:	ID, name = sortBySelection
46:	(
46:	int
46:	ID, name = array
46:	[
46:	]
46:	,
46:	int
46:	ID, name = size
46:	)
47:	{
48:	int
48:	ID, name = i
48:	;
49:	int
49:	ID, name = k
49:	;
50:	int
50:	ID, name = min
50:	;
51:	int
51:	ID, name = temp
51:	;
53:	ID, name = i
53:	=
53:	NUM, value = 0
53:	;
54:	while
54:	(
54:	ID, name = i
54:	<
54:	ID, name = size
54:	-
54:	NUM, value = 1
54:	)
55:	{
56:	ID, name = min
56:	=
56:	ID, name = i
56:	;
57:	ID, name = k
57:	=
57:	ID, name = i
57:	+
57:	NUM, value = 1
57:	;
58:	while
58:	(
58:	ID, name = k
58:	<
58:	ID, name = size
58:	)
59:	{
60:	if
60:	(
60:	ID, name = array
60:	[
60:	ID, name = k
60:	]
60:	<
60:	ID, name = array
60:	[
60:	ID, name = min
60:	]
60:	)
61:	{
62:	ID, name = min
62:	=
62:	ID, name = k
62:	;
63:	}
64:	ID, name = k
64:	=
64:	ID, name = k
64:	+
64:	NUM, value = 1
64:	;
65:	}
66:	if
66:	(
66:	ID, name = min
66:	=
66:	ID, name = i
66:	)
67:	{
68:	ID, name = temp
68:	=
68:	ID, name = array
68:	[
68:	ID, name = i
68:	]
68:	;
69:	ID, name = array
69:	[
69:	ID, name = i
69:	]
69:	=
69:	ID, name = array
69:	[
69:	ID, name = min
69:	]
69:	;
70:	ID, name = array
70:	[
70:	ID, name = min
70:	]
70:	=
70:	ID, name = temp
70:	;
71:	}
73:	ID, name = i
73:	=
73:	ID, name = i
73:	+
73:	NUM, value = 1
73:	;
74:	}
75:	}
77:	void
77:	ID, name = main
77:	(
77:	void
77:	)
78:	{
79:	int
79:	ID, name = i
79:	;
80:	int
80:	ID, name = num
80:	;
81:	int
81:	ID, name = numa
81:	;
83:	ID, name = i
83:	=
83:	NUM, value = 0
83:	;
84:	while
84:	(
84:	ID, name = i
84:	<
84:	NUM, value = 10
84:	)
85:	{
86:	ID, name = Array
86:	[
86:	ID, name = i
86:	]
86:	=
86:	ID, name = input
86:	(
86:	)
86:	;
87:	ID, name = i
87:	=
87:	ID, name = i
87:	+
87:	NUM, value = 1
87:	;
88:	}
90:	ID, name = num
90:	=
90:	ID, name = input
90:	(
90:	)
90:	;
91:	ID, name = numa
91:	=
91:	ID, name = input
91:	(
91:	)
91:	;
93:	ID, name = sortBySelection
93:	(
93:	ID, name = Array
93:	,
93:	NUM, value = 10
93:	)
93:	;
96:	ID, name = output
96:	(
96:	ID, name = findByBinary
96:	(
96:	ID, name = Array
96:	,
96:	NUM, value = 10
96:	,
96:	ID, name = num
96:	)
96:	)
96:	;
97:	ID, name = output
97:	(
97:	ID, name = findByBinary
97:	(
97:	ID, name = Array
97:	,
97:	NUM, value = 10
97:	,
97:	ID, name = numa
97:	)
97:	)
97:	;
98:	}
98:	EOF
